name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

# Ensure GITHUB_TOKEN has the rights to create releases and upload assets
permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: MarkReview ${{ github.ref }}
        draft: false
        prerelease: false

  build-tauri:
    runs-on: ${{ matrix.platform }}
    needs: create-release
    
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-20.04]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
    
    - name: Install dependencies (Ubuntu only)
      if: matrix.platform == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
        npm ci
    
    - name: Install dependencies (macOS only)
      if: matrix.platform == 'macos-latest'
      run: npm ci
    
    - name: Install dependencies (Windows only)
      if: matrix.platform == 'windows-latest'
      run: npm ci

    - name: Install NSIS (Windows only)
      if: matrix.platform == 'windows-latest'
      run: choco install nsis -y
    
    - name: Install Tauri CLI
      run: npm install -g @tauri-apps/cli
    
    - name: Build Tauri application (Windows)
      if: matrix.platform == 'windows-latest'
      run: npm run tauri build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAURI_BUNDLE_TARGETS: nsis

    - name: Build Tauri application (macOS)
      if: matrix.platform == 'macos-latest'
      run: npm run tauri build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAURI_BUNDLE_TARGETS: dmg

    - name: Build Tauri application (Linux)
      if: matrix.platform == 'ubuntu-20.04'
      run: npm run tauri build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAURI_BUNDLE_TARGETS: appimage,deb
    
    - name: Resolve Windows NSIS artifact
      if: matrix.platform == 'windows-latest'
      shell: pwsh
      run: |
        $file = Get-ChildItem -Path "src-tauri/target/release/bundle/nsis" -Filter *.exe -Recurse | Select-Object -ExpandProperty FullName -First 1
        if (-not $file) { Write-Error "NSIS installer not found"; exit 1 }
        ("NSIS_PATH=$file") | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        ("NSIS_NAME=" + (Split-Path $file -Leaf)) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Upload Windows NSIS
      if: matrix.platform == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.NSIS_PATH }}
        asset_name: ${{ env.NSIS_NAME }}
        asset_content_type: application/octet-stream

    - name: Resolve Windows MSI artifact
      if: matrix.platform == 'windows-latest'
      shell: pwsh
      run: |
        $file = Get-ChildItem -Path "src-tauri/target/release/bundle/msi" -Filter *.msi -Recurse | Select-Object -ExpandProperty FullName -First 1
        if (-not $file) { Write-Error "MSI not found"; exit 1 }
        ("MSI_PATH=$file") | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        ("MSI_NAME=" + (Split-Path $file -Leaf)) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Upload Windows MSI
      if: matrix.platform == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.MSI_PATH }}
        asset_name: ${{ env.MSI_NAME }}
        asset_content_type: application/octet-stream
    
    - name: Resolve macOS DMG artifact
      if: matrix.platform == 'macos-latest'
      shell: bash
      run: |
        file=$(ls -1 src-tauri/target/release/bundle/dmg/*.dmg | head -n 1)
        if [[ -z "$file" ]]; then echo "DMG not found"; exit 1; fi
        echo "DMG_PATH=$file" >> $GITHUB_ENV
        echo "DMG_NAME=$(basename "$file")" >> $GITHUB_ENV

    - name: Upload macOS DMG
      if: matrix.platform == 'macos-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.DMG_PATH }}
        asset_name: ${{ env.DMG_NAME }}
        asset_content_type: application/octet-stream
    
    - name: Resolve Linux DEB artifact
      if: matrix.platform == 'ubuntu-20.04'
      shell: bash
      run: |
        file=$(ls -1 src-tauri/target/release/bundle/deb/*.deb | head -n 1)
        if [[ -z "$file" ]]; then echo "DEB not found"; exit 1; fi
        echo "DEB_PATH=$file" >> $GITHUB_ENV
        echo "DEB_NAME=$(basename "$file")" >> $GITHUB_ENV

    - name: Upload Linux DEB
      if: matrix.platform == 'ubuntu-20.04'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.DEB_PATH }}
        asset_name: ${{ env.DEB_NAME }}
        asset_content_type: application/vnd.debian.binary-package

    - name: Resolve Linux AppImage artifact
      if: matrix.platform == 'ubuntu-20.04'
      shell: bash
      run: |
        file=$(ls -1 src-tauri/target/release/bundle/appimage/*.AppImage | head -n 1)
        if [[ -z "$file" ]]; then echo "AppImage not found"; exit 1; fi
        echo "APPIMAGE_PATH=$file" >> $GITHUB_ENV
        echo "APPIMAGE_NAME=$(basename "$file")" >> $GITHUB_ENV

    - name: Upload Linux AppImage
      if: matrix.platform == 'ubuntu-20.04'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.APPIMAGE_PATH }}
        asset_name: ${{ env.APPIMAGE_NAME }}
        asset_content_type: application/octet-stream
